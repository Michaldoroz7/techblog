version: "3.8"

services:

  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    container_name: discovery-server
    ports:
      - "8761:8761"
    networks:
      - microservices-net

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - discovery-server
    environment:
      JWT_SECRET: ${JWT_SECRET}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
    networks:
      - microservices-net

  postgres-auth:
    image: postgres:15
    container_name: postgres-auth
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_AUTH_DB}
      POSTGRES_USER: ${POSTGRES_AUTH_USER}
      POSTGRES_PASSWORD: ${POSTGRES_AUTH_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - auth_pg_data:/var/lib/postgresql/data
    networks:
      - microservices-net

  postgres-article:
    image: postgres:15
    container_name: postgres-article
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_ARTICLE_DB}
      POSTGRES_USER: ${POSTGRES_ARTICLE_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ARTICLE_PASSWORD}

    volumes:
      - article_pg_data:/var/lib/postgresql/data
    networks:
      - microservices-net

  postgres-comment:
    image: postgres:15
    container_name: postgres-comment
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_COMMENT_DB}
      POSTGRES_USER: ${POSTGRES_COMMENT_USER}
      POSTGRES_PASSWORD: ${POSTGRES_COMMENT_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - comment_pg_data:/var/lib/postgresql/data
    networks:
      - microservices-net

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8081:8081"
    depends_on:
      - postgres-auth
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-auth:5432/${POSTGRES_AUTH_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_AUTH_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_AUTH_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - microservices-net

  article-service:
    build:
      context: ./article-service
      dockerfile: Dockerfile
    container_name: article-service
    ports:
      - "8082:8082"
    depends_on:
      - postgres-article
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-article:5432/${POSTGRES_ARTICLE_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_ARTICLE_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_ARTICLE_PASSWORD}
    networks:
      - microservices-net

  comment-service:
    build:
      context: ./comment-service
      dockerfile: Dockerfile
    container_name: comment-service
    ports:
      - "8083:8083"
    depends_on:
      - postgres-comment
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-comment:5432/${POSTGRES_COMMENT_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_COMMENT_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGREs_COMMENT_PASSWORD}
    networks:
      - microservices-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - microservices-net

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - microservices-net

volumes:
  auth_pg_data:
  article_pg_data:
  comment_pg_data:

networks:
  microservices-net:
    driver: bridge
